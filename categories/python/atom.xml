<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | geeknam's blog]]></title>
  <link href="http://geeknam.github.com/categories/python/atom.xml" rel="self"/>
  <link href="http://geeknam.github.com/"/>
  <updated>2012-02-14T13:14:15+11:00</updated>
  <id>http://geeknam.github.com/</id>
  <author>
    <name><![CDATA[Ngo Minh Nam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Regenerating Google's ClientLogin AuthToken in Django]]></title>
    <link href="http://geeknam.github.com/2012/02/14/regenerating-googles-clientlogin-authtoken-in-django/"/>
    <updated>2012-02-14T12:47:00+11:00</updated>
    <id>http://geeknam.github.com/2012/02/14/regenerating-googles-clientlogin-authtoken-in-django</id>
    <content type="html"><![CDATA[<p>If your application makes use of Google API, you will most likely have to deal with AuthToken expiry (unless you use oAuth). As far as I know, AuthToken generated with ClientLogin authorization expires after 2 weeks. Therefore, it's good to have a solution to auto regenerate it. First of all, create a model that stores the token and the last updated day.</p>

<!-- more -->


<p>``` python
from django.db import models
from datetime import datetime, timedelta</p>

<p>class AuthToken(models.Model):</p>

<pre><code>token = models.TextField()
last_updated = models.DateTimeField(auto_now_add=True)

def token_update(self):
    # Check if the token's lifespan is more than n days (n=1 in this case)
    # You can adjust n value to whatever you want

    if datetime.now() - self.last_updated &gt; timedelta(days=1):
        return True
    return False
</code></pre>

<p>```</p>

<p>Now let's write a function that regenerates AuthToken and saves it back to database.</p>

<p>```python
from models import AuthToken</p>

<p>CLIENT_LOGIN_URL = 'https://www.google.com/accounts/ClientLogin'</p>

<p>def regenerate_authtoken():</p>

<pre><code>auth_token = AuthToken.objects.all()[0]
if auth_token.token_update():
    data = urllib.urlencode(
        {
            'Email': 'youremail@gmail.com',
            'Passwd': 'yourpassword',
            'service': 'service_name',
            'accountType': 'GOOGLE'
        }
    )
    req = urllib2.Request(CLIENT_LOGIN_URL, data=data)
    resp = urllib2.urlopen(req)
    resp_body = resp.read()

    resp_dict = dict(
        x.split('=') for x in resp_body.split('\n') if x
    )
    auth_token.token = resp_dict['Auth']
    auth_token.save()
</code></pre>

<p>```</p>

<p>With this approach you would have to call <code>regenerate_authtoken()</code> every time you make API requests. Let me know if you have a better solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More on Django FormView]]></title>
    <link href="http://geeknam.github.com/2012/02/13/more-on-django-formview/"/>
    <updated>2012-02-13T21:49:00+11:00</updated>
    <id>http://geeknam.github.com/2012/02/13/more-on-django-formview</id>
    <content type="html"><![CDATA[<p><span class='pullquote-right' data-pullquote='Django’s generic views were developed to take away the monotony of repeating certain patterns again and again'>
I've been trying to limit myself to use class based generic views as much as possible. Django’s generic views were developed to take away the monotony of repeating certain patterns again and again. Some generics views are properly documented (like ListView and DetailView), however I wanted to make use of FormView to process my forms. Unfortunately, there were no FormView examples provided. So here it is.</p>

<!-- more -->


<p>``` python
from django.views import generic</p>

<p>class EmailPreferenceView(generic.FormView):</p>

<pre><code>form_class = EmailPreferenceForm

def get(self, *args, **kwargs):
    # You can access url variables from kwargs
    # url: /email_preferences/geeknam &gt; kwargs['username'] = 'geeknam'
    # Assign to self.subscriber to be used later
    self.subscriber = get_subscriber(kwargs['username'])

def post(self, request, *args, **kwargs):
    # Process view when the form gets POSTed
    pass

def get_initial(self):
    # Populate ticks in BooleanFields
    initial = {}
    for s in self.subscriber.events.all():
        initial[s.value_id] = True
    return initial

def get_form(self, form_class):
    # Initialize the form with initial values and the subscriber object
    # to be used in EmailPreferenceForm for populating fields
    return form_class(
        initial=self.get_initial(),
        subscriber=self.subscriber
    )

def get_success_url(self):
    # Redirect to previous url
    return self.request.META.get('HTTP_REFERER', None)

def form_valid(self, form):
    messages.info(
        self.request,
        "You have successfully changed your email notifications"
    )
    return super(EmailPreferenceView, self).form_valid(form)

def form_invalid(self, form):
    messages.info(
        self.request,
        "Your submission has not been saved. Try again."
    )
    return super(EmailPreferenceView, self).form_invalid(form)
</code></pre>

<p>email_preferences = EmailPreferenceView.as_view()
```
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django dynamic unsubscribe forms]]></title>
    <link href="http://geeknam.github.com/2012/02/13/django-dynamic-unsubscribe-forms/"/>
    <updated>2012-02-13T15:40:00+11:00</updated>
    <id>http://geeknam.github.com/2012/02/13/django-dynamic-unsubscribe-forms</id>
    <content type="html"><![CDATA[<p>The normal usecase of Django forms is to have predefined fields in forms like this:</p>

<p>``` python
from django import forms</p>

<p>class EmailPreferenceForm(forms.Form):</p>

<pre><code>daily_digest = forms.BooleanField(required=False)
weekly_news = forms.BooleanField(required=False)
monthly_summary = forms.BooleanField(required=False)
</code></pre>

<p>```</p>

<p>What if we wanted to add more fields to the form like <code>weekly_digest</code> and so on? Well, of course you would have to add a new field to the form and maybe handle extra work in your views. Let's make this more dynamic.</p>

<!-- more -->


<p>Let's create Event model which will store all events. Entries from this model will be generated into fields in the form later:</p>

<p>``` python
from django.db import models</p>

<p>class Event(models.Model):</p>

<pre><code>title = models.CharField(
    max_length=100,
    help_text='e.g: Weekly News'
)
title_id = models.CharField(
    max_length=100,
    blank=True,
    editable=False
)

def __unicode__(self):
    return self.title

def save(self, *args, **kwargs):
    if not self.title_id:
        # Generate title_id based on title
        # Weekly News &gt; weekly_news
        self.title_id = self.title.lower().replace(' ', '_').replace("'", '')
</code></pre>

<p>```</p>

<p>And now the form that will generate fields based on all entries in Event model</p>

<p>``` python
from django import forms
from models import Event</p>

<p>class EmailPreferenceForm(forms.Form):</p>

<pre><code># Auto generate fields based on title_id in Event
def __init__(self, *args, **kwargs):
    super(EmailPreferenceForm, self).__init__(*args, **kwargs)
    fields = Event.objects.all()
    for f in fields:
        self.fields[f.title_id] = forms.BooleanField(required=False)
</code></pre>

<p>```</p>

<p>Let's say you have a Subscriber model that has many Events. This piece of code will initialize the checkboxes based on subscribers' preferences.</p>

<p>``` python
from forms import EmailPreferenceForm</p>

<p>def email_preferences(request):</p>

<pre><code>if request.method == 'POST':
    email_preferences = EmailPreferenceForm(request.POST)
    # Process the form
else:
    # Initialize the preferences. This will make the boxes checked.
    initial = {}
    for e in subscriber.events.all():
        initial[e.title_id] = True
    email_preferences = EmailPreferenceForm(initial=initial)

# Context and HTTPResponses here
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loading fixtures in Django tests]]></title>
    <link href="http://geeknam.github.com/2012/02/13/loading-fixtures-in-django-tests/"/>
    <updated>2012-02-13T14:22:00+11:00</updated>
    <id>http://geeknam.github.com/2012/02/13/loading-fixtures-in-django-tests</id>
    <content type="html"><![CDATA[<p>When writing tests in Django apps, I have an urge to reuse code in setUp() across all tests (most of my apps use the same setUp). So I come up with a GlobalSetup class that other tests should inherit from (it's located at the project level). However, this approach creates a problem with loading fixtures. According to Django <a href="https://docs.djangoproject.com/en/dev/topics/testing/">docs</a>: <!-- more --></p>

<p><blockquote><p>Once you've created a fixture and placed it in a fixtures directory in one of your INSTALLED_APPS, you can use it in your unit tests by specifying a fixtures class attribute on your django.test.TestCase subclass</p></blockquote></p>

<p>And you would normally do this to load the fixtures:<br/>
``` python
from django.test import TestCase</p>

<p>class PoniesTest(TestCase):</p>

<pre><code>fixtures = ['ponies']

def test_ponies(self):
    call_some_test_code()
</code></pre>

<p><code>
How should we load the fixtures now, when the test file is not at the apps level?
Instead of creating fixures folder and placing fixtures in them (in every app), a better and neater way to handle this would be to put all fixtures in one folder at the project level and load them. You can do this with `call_command` as following:  
</code> python
from django.test import TestCase
from django.core.management import call_command</p>

<p>class GlobalSetup(self):</p>

<pre><code># Create some ponies and snakes here
def setUp(self):
    # Load fixtures
    call_command('loaddata', 'tests/ponies', verbosity=0)
</code></pre>

<p>```</p>

<p>Invoking this <code>call_command</code> is equivalent to running <code>manage.py loaddata /path/to/fixtures</code>
The test in each app can now inherit GlocalSetup and reuse setUp():
``` python
from project.tests import GlobalSetup</p>

<p>class PoniesTest(GlobalSetup):</p>

<pre><code>def setUp(self):
    super(PoniesTest, self).setUp()

def test_ponies(self):
    call_some_test_code()
</code></pre>

<p><code>``
You could also limit each test to load different fixtures by passing a list of fixtures name</code>['ponies', 'snakes']` to setUp().
Hope this will help you to DRY up your tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabric deployment]]></title>
    <link href="http://geeknam.github.com/2011/11/12/fabric-deployment/"/>
    <updated>2011-11-12T13:28:00+11:00</updated>
    <id>http://geeknam.github.com/2011/11/12/fabric-deployment</id>
    <content type="html"><![CDATA[<p>Having played with Capistrano before, I suddenly had an urge to find its Pythonic alternative. After few google searches, I stumbled upon Fabric. It's basically a "python library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks". Spent few minutes trying to write functions to deploy Django applications to my Linux server and I have to say, Fabric's API is really easy to use, very customizable (it's as easy as wrapping up your shell commands in a python function) and more importantly it has Django integration which I'm gonna need the most. Having said all these, here's the video demo I recorded while messing around with Fabric, enjoy:</p>

<p>P/S: django-nose, nosegrowl2 and tdaemon were used in order to show notification of testing results (just FYI)</p>

<object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://i.ytimg.com/vi/xtmb-5WPWQs/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/xtmb-5WPWQs?version=3&f=user_uploads&c=google-webdrive-0&app=youtube_gdata" />
<param name="bgcolor" value="#FFFFFF" />
<embed width="620" height="420"  src="http://www.youtube.com/v/xtmb-5WPWQs?version=3&f=user_uploads&c=google-webdrive-0&app=youtube_gdata" type="application/x-shockwave-flash"></embed></object>

]]></content>
  </entry>
  
</feed>
