<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | geeknam's blog]]></title>
  <link href="http://geeknam.github.com/categories/python/atom.xml" rel="self"/>
  <link href="http://geeknam.github.com/"/>
  <updated>2012-02-13T15:11:14+11:00</updated>
  <id>http://geeknam.github.com/</id>
  <author>
    <name><![CDATA[Ngo Minh Nam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Loading fixtures in Django tests]]></title>
    <link href="http://geeknam.github.com/2012/02/13/loading-fixtures-in-django-tests/"/>
    <updated>2012-02-13T14:22:00+11:00</updated>
    <id>http://geeknam.github.com/2012/02/13/loading-fixtures-in-django-tests</id>
    <content type="html"><![CDATA[<p>When writing tests in Django apps, I have an urge to reuse code in setUp() across all tests (most of my apps use the same setUp). So I come up with a GlobalSetup class that other tests should inherit from (it's located at the project level). However, this approach creates a problem with loading fixtures. According to Django <a href="https://docs.djangoproject.com/en/dev/topics/testing/">docs</a>: <!-- more --></p>

<p><blockquote><p>Once you've created a fixture and placed it in a fixtures directory in one of your INSTALLED_APPS, you can use it in your unit tests by specifying a fixtures class attribute on your django.test.TestCase subclass</p></blockquote></p>

<p>And you would normally do this to load the fixtures:<br/>
``` python
from django.test import TestCase</p>

<p>class PoniesTest(TestCase):</p>

<pre><code>fixtures = ['ponies']

def test_ponies(self):
    call_some_test_code()
</code></pre>

<p><code>
How should we load the fixtures now, when the test file is not at the apps level?
Instead of creating fixures folder and placing fixtures in them (in every app), a better and neater way to handle this would be to put all fixtures in one folder at the project level and load them. You can do this with `call_command` as following:  
</code> python
from django.test import TestCase
from django.core.management import call_command</p>

<p>class GlobalSetup(self):</p>

<pre><code># Create some ponies and snakes here
def setUp(self):
    # Load fixtures
    call_command('loaddata', 'tests/ponies', verbosity=0)
</code></pre>

<p>```</p>

<p>Invoking this <code>call_command</code> is equivalent to running <code>manage.py loaddata /path/to/fixtures</code>
The test in each app can now inherit GlocalSetup and reuse setUp():
``` python
from django.test import from project.tests import GlobalSetup</p>

<p>class PoniesTest(GlobalSetup):</p>

<pre><code>def setUp(self):
    super(PoniesTest, self).setUp()

def test_ponies(self):
    call_some_test_code()
</code></pre>

<p><code>``
You could also limit each test to load different fixtures by passing a list of fixtures name</code>['ponies', 'snakes']` to setUp().
Hope this will help you to DRY up your tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabric deployment]]></title>
    <link href="http://geeknam.github.com/2011/11/12/fabric-deployment/"/>
    <updated>2011-11-12T13:28:00+11:00</updated>
    <id>http://geeknam.github.com/2011/11/12/fabric-deployment</id>
    <content type="html"><![CDATA[<p>Having played with Capistrano before, I suddenly had an urge to find its Pythonic alternative. After few google searches, I stumbled upon Fabric. It's basically a "python library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks". Spent few minutes trying to write functions to deploy Django applications to my Linux server and I have to say, Fabric's API is really easy to use, very customizable (it's as easy as wrapping up your shell commands in a python function) and more importantly it has Django integration which I'm gonna need the most. Having said all these, here's the video demo I recorded while messing around with Fabric, enjoy:</p>

<p>P/S: django-nose, nosegrowl2 and tdaemon were used in order to show notification of testing results (just FYI)</p>

<object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://i.ytimg.com/vi/xtmb-5WPWQs/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/xtmb-5WPWQs?version=3&f=user_uploads&c=google-webdrive-0&app=youtube_gdata" />
<param name="bgcolor" value="#FFFFFF" />
<embed width="620" height="420"  src="http://www.youtube.com/v/xtmb-5WPWQs?version=3&f=user_uploads&c=google-webdrive-0&app=youtube_gdata" type="application/x-shockwave-flash"></embed></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GAE XMPPHandler]]></title>
    <link href="http://geeknam.github.com/2010/12/25/gae-xmpphandler/"/>
    <updated>2010-12-25T15:57:00+11:00</updated>
    <id>http://geeknam.github.com/2010/12/25/gae-xmpphandler</id>
    <content type="html"><![CDATA[<p>Finally got time to continue developing Push Contacts. I've gotten a nerve-wrecking problem while developing with C2DM
applications. When the app supposed to get the push message, it didn't respond to it. Looking at the logs I encountered
an error stack related to GTalk (with TalkProvider tag). Decided to google the problem and the solution was to sign out
of GTalk on the phone.</p>

<!-- more -->


<p>Ok now a tip related to Google App Engine development. I just added a new feature to Push Contacts which is allowing
users to reply to the latest SMS received. I had to retrieve the email of the user the bot is chatting with to find
which phone number to send the SMS to. Took a look at guru.appspot.com source code and decided to use
<code>xmpp_handlers.CommandHandler</code>. Used this method <code>text_message(self, message)</code> and message.sender supposed to return the
sender of a message but instead it returned an IM formatted string. Here is how you can retrieve the email.</p>

<p>``` python
class XMPPHandler(xmpp_handlers.CommandHandler):</p>

<pre><code>def text_message(self, message):
    idx  = message.sender.index('/')
    user = message.sender[0:idx]
    logging.debug(user)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
