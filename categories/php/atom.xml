<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | geeknam's blog]]></title>
  <link href="http://blog.namis.me/categories/php/atom.xml" rel="self"/>
  <link href="http://blog.namis.me/"/>
  <updated>2012-05-13T04:47:35+10:00</updated>
  <id>http://blog.namis.me/</id>
  <author>
    <name><![CDATA[Ngo Minh Nam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fatal error: Call to undefined function _make_cat_compat()]]></title>
    <link href="http://blog.namis.me/2011/11/05/fatal-error-call-to-undefined-function-make-cat-compat/"/>
    <updated>2011-11-05T13:23:00+11:00</updated>
    <id>http://blog.namis.me/2011/11/05/fatal-error-call-to-undefined-function-make-cat-compat</id>
    <content type="html"><![CDATA[<p>If you have the following error after uploading your WordPress, and re-uploading <code>category-template.php</code> didn't work, you could try pasting this function at the of the file.</p>

<p>``` php
&lt;?php</p>

<p>function _make_cat_compat( &amp;$category ) {</p>

<pre><code>if ( is_object( $category ) ) {
    $category-&gt;cat_ID = &amp;$category-&gt;term_id;
    $category-&gt;category_count = &amp;$category-&gt;count;
    $category-&gt;category_description = &amp;$category-&gt;description;
    $category-&gt;cat_name = &amp;$category-&gt;name;
    $category-&gt;category_nicename = &amp;$category-&gt;slug;
    $category-&gt;category_parent = &amp;$category-&gt;parent;
} 
elseif ( is_array( $category ) &amp;&amp; isset( $category['term_id'] ) ) {
    $category['cat_ID'] = &amp;$category['term_id'];
    $category['category_count'] = &amp;$category['count'];
    $category['category_description'] = &amp;$category['description'];
    $category['cat_name'] = &amp;$category['name'];
    $category['category_nicename'] = &amp;$category['slug'];
    $category['category_parent'] = &amp;$category['parent'];
}
</code></pre>

<p>}</p>

<p>?>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PHP to parse git history]]></title>
    <link href="http://blog.namis.me/2011/05/08/using-php-to-parse-git-history/"/>
    <updated>2011-05-08T13:19:00+10:00</updated>
    <id>http://blog.namis.me/2011/05/08/using-php-to-parse-git-history</id>
    <content type="html"><![CDATA[<p>Here is how you can store git command output in a good manner after which you will be able to easily retrieve necessary information. This snippet belongs to the project I'm currently working on.</p>

<p>``` php
&lt;?php
// Author: Ngo Minh Nam</p>

<p>$dir = "/path/to/your/repo/";
$output = array();
chdir($dir);
exec("git log",$output);
$history = array();
foreach($output as $line){</p>

<pre><code>if(strpos($line, 'commit')===0){
    if(!empty($commit)){
        array_push($history, $commit);  
        unset($commit);
    }
    $commit['hash']   = substr($line, strlen('commit'));
}
else if(strpos($line, 'Author')===0){
    $commit['author'] = substr($line, strlen('Author:'));
}
else if(strpos($line, 'Date')===0){
    $commit['date']   = substr($line, strlen('Date:'));
}
else{       
    $commit['message']  .= $line;
}
</code></pre>

<p>}</p>

<p>print_r($history);</p>

<p>?>
```</p>
]]></content>
  </entry>
  
</feed>
