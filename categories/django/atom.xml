<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | Nam Ngo's blog]]></title>
  <link href="http://blog.namis.me/categories/django/atom.xml" rel="self"/>
  <link href="http://blog.namis.me/"/>
  <updated>2014-06-29T01:14:38+10:00</updated>
  <id>http://blog.namis.me/</id>
  <author>
    <name><![CDATA[Nam Ngo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django Inspired Design Patterns - Part 1: Middleware]]></title>
    <link href="http://blog.namis.me/2014/06/26/django-inspired-design-patterns-part-1/"/>
    <updated>2014-06-26T21:48:00+10:00</updated>
    <id>http://blog.namis.me/2014/06/26/django-inspired-design-patterns-part-1</id>
    <content type="html"><![CDATA[<p>{% pullquote %}
Refactoring code is (most of the time) a fun activity until you hit an obstacle or run out of ways to
simplify the code. You'll find yourself looking for new design patterns from books or even digging inside the source code
of your favorite open source projects to find some inspiration. Having worked with Django for 3 years, I find its <a href="https://docs.djangoproject.com/en/dev/misc/design-philosophies/">design
philosophy</a> and decisions ideal. As a result, I've decided to
dedicate a blog series to cover this topic: Django inspired design patterns and how you can use them to refactor your code.</p>

<!-- more -->


<p><strong>Middleware</strong><br/>
Middleware is a simple yet very robust component of Django. {"Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output."} This should look familiar
to you</p>

<pre><code class="python settings.py">MIDDLEWARE_CLASSES = (
    'django.middleware.gzip.GZipMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
)
</code></pre>

<p>The core concept of middleware is to dynamically load middleware classes using the provided dotted paths.</p>

<p><strong>Where shall we consider this design pattern?</strong><br/>
Let's consider a simple example of an email validator that all of us can relate to.
The email validator:<br/>
1. Has input and output<br/>
2. Consists of validation conditions (validate input) - validators<br/>
3. Can optionally mutate the output - mutators</p>

<p>A simple version can be written like this
``` python email_validator.py
 def validate_email(email):
     if '@' not in email:
         raise ValidationError('Invalid email. @ not found')
     if '.' not in email:
         raise ValidationError('Invalid email. Incorrect domain?')</p>

<pre><code> # lowercase domain
 name, domain = email.split('@')
 email = '@'.join([name, domain.lower()])
 return email
</code></pre>

<pre><code>
__How do we go about refactoring?__  
Let's break down the logic into small units of validators and mutators.
We need to define a `PIPELINE` constant which holds the dotted paths that can be loaded.
</code></pre>

<p>PIPELINE = (
    'validation.contains_dot',
    'validation.contains_at',
    'mutators.lowercase_domain',
    'mutators.lowercase_name',
)</p>

<h1>in validation.py</h1>

<p>def contains_dot(email):
    if not '.' in email:
        raise Exception('No . found')
    return</p>

<p>def contains_at(email):
    if not '@' in email:
        raise Exception('No @ found')
    return</p>

<h1>in mutators.py</h1>

<p>def lowercase_domain(email):
    value, domain = email.split('@')
    domain = domain.lower()
    return '@'.join([value, domain])</p>

<p>def lowercase_name(email):
    value, domain = email.split('@')
    value = value.lower()
    return '@'.join([value, domain])
```</p>

<p>Let's create a EmailValidator class that dynamically loads validators and mutators.
<code>load_pipelines</code> imports functions from dotted paths and add them into a list.
This example uses <code>__import__</code> but it's recommended that you use <code>importlib</code></p>

<pre><code class="python email_validator_class.py">class EmailValidator(object):

    def __init__(self, email):
        self._pipelines = []
        self.load_pipelines()
        self.email = email

        for func in self._pipelines:
            # execute each function
            res = func(self.email)
            if res:
                self.email = res

    def load_pipelines(self):
        for line in PIPELINE:
            mod_name, func_name = line.split('.')
            mod = __import__(mod_name)
            func = getattr(mod, func_name)
            self._pipelines.append(func)

email = EmailValidator('sOmeEmail@CamelCase.com').email
</code></pre>

<p><strong>Why do it this way? What are the benefits?</strong><br/>
-  <strong>Pluggable</strong>: this design makes it easy for other developers to extend the logic of your code, it's maintainable. Let's say if there's a new requirement to validate that the email is actually valid and will not bounce, we can easily add a new function to the validators file and add it into the <code>PIPELINE</code>.<br/>
-  <strong>Loose coupling</strong>: each pipe (function) doesn't know/care what the other does.<br/>
-  <strong>Easy to unit test</strong>: by breaking down the logic into small units, it's now easier to write tests. We can now write tests for each of those functions in the pipeline.</p>

<p>{% endpullquote %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Unit Tests for Django Middleware]]></title>
    <link href="http://blog.namis.me/2012/05/13/writing-unit-tests-for-django-middleware/"/>
    <updated>2012-05-13T02:21:00+10:00</updated>
    <id>http://blog.namis.me/2012/05/13/writing-unit-tests-for-django-middleware</id>
    <content type="html"><![CDATA[<p>Sometimes, it is a pain in the ass to write tests for Django apps (even though Django provides some pretty awesome testing tools out of box). One of the scenarios is testing middleware. Let's take a look at this middleware.</p>

<pre><code class="python">from .cart import Cart

class CartMiddleware:
    def process_request(self, request):
        '''Load the current cart from the session, or create a new one'''
        cart = request.session.get('cart', None)

        if cart is None:
            cart = Cart()
        else:
            cart = Cart(**cart)

        setattr(request, 'cart', cart)
        return None
</code></pre>

<!-- more -->


<p><strong>What the middleware does:</strong><br/>
- It gets attributes/values of the cart from the session<br/>
- It creates a cart with those unpacked arguments or creates a fresh cart and attaches this cart to the request object.</p>

<p><strong>Now, let's analyze what needs to be tested:</strong><br/>
1. Assert that if the cart exists in the session, it should be set as an attribute of the request<br/>
2. Assert that if the cart doesn't exist in the session, a new cart is created and attached to the request object<br/>
3. Assert that all attributes of the cart can be accessed after the cart is attached to the request object</p>

<p><strong>How about dependencies? What do we need in order to write this test?</strong><br/>
- CartMiddleware class (this can be easily imported)<br/>
- <code>request</code> object as an argument in process_request(). This one is hard to obtain, and since we are writing a unit test, let's just mock it.</p>

<p>We are now ready to write the test</p>

<pre><code class="python">from django.test import TestCase
from mock import Mock
from .cart import CartMiddleware, Cart

class CartMiddlewareTest(TestCase):

    def setUp(self):
        self.cm = CartMiddleware()
        self.request = Mock()
        self.request.session = {}
</code></pre>

<p>This sets up an instance of CartMiddleware and mocks a request. I'm using Michael Foord's <code>mock</code> library to assist me with this. Since we know <code>session</code> is a dictionary like object, we can mock it with an empty dictionary for now.</p>

<pre><code class="python ">    def test_process_request_without_cart(self):
        self.assertEqual(self.cm.process_request(self.request), None)
        self.assertIsInstance(self.request.cart, Cart)

    def test_process_request_with_cart(self):
        data = {'postcode': '3050'}
        self.request.session = {'cart': data}
        self.assertEqual(self.cm.process_request(self.request), None)
        self.assertIsInstance(self.request.cart, Cart)
        self.assertEqual(self.request.cart.postcode, data['postcode'])
</code></pre>

<p><strong>The first test asserts that (without a cart in the session):</strong><br/>
- process_request returns None<br/>
- Cart object has been attached to request as an attribute</p>

<p><strong>The second test asserts that (with a cart in the session):</strong><br/>
- process_request returns None<br/>
- Dictionary containing cart attributes in <code>session</code> is unpacked and used to create a Cart object.<br/>
- The cart attribute (postcode in this case) can be accessed</p>

<p><strong>Conclusion</strong><br/>
As you could see, I didn't have to use <code>django.test.client.Client</code> to create requests, responses or sessions. When writing unit tests, one shouldn't care much about creating a precise dependency because, eventually what needs to be tested is the behaviour of the code and not the dependency itself. Therefore, it is more advisable to mock those dependencies in order to satisfy the conditions of the unit of code we test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Burn Your Fixtures, Use Model Factories]]></title>
    <link href="http://blog.namis.me/2012/04/21/burn-your-fixtures/"/>
    <updated>2012-04-21T16:46:00+10:00</updated>
    <id>http://blog.namis.me/2012/04/21/burn-your-fixtures</id>
    <content type="html"><![CDATA[<p>This blog post is inspired by one of the talks in PyCon US 2012 by <a href="http://twitter.com/carljm">Carl Meyer</a> named <a href="http://pyvideo.org/video/699/testing-and-django">Testing and Django</a> in which he discusssed the guidelines for writing good tests.</p>

<p>After watching the whole talk, I realised what I've been doing is all wrong. The fact that tests I write run within minutes shows how terrible my unit-test-fu is. Using fixtures was a really bad idea. Each test case I wrote would load some fixtures to setup necessary dependencies. Sometimes, this creates a problem when the model has been redesigned. The fixtures would have to be edited due to the change of the model otherwise they won't be installed properly.</p>

<p>Instead of using fixtures, Carl introduced <code>model factories</code> which would create a model instance with default values. Of course, you will have a flexibility to change those default values to suit each of your test because naturally, when you test a behaviour of a class, you definitely need it to be in different conditions.</p>

<!-- more -->


<p>Here is an example of a model factory that was used in the talk:</p>

<pre><code class="python">def create_profile(**kwargs):
    defaults = {
        "likes_cheese": True,
        "age": 32,
        "address": "3815 Brookside Dr",
    }
    defaults.update(kwargs)
    if "user" not in defaults:
        defaults["user"] = create_user()
    return Profile.objects.create(**defaults)
</code></pre>

<p>And this is how you could use it in the test:</p>

<pre><code class="python">def test_can_vote(self):
    """A user age 18+ can vote in the US."""
    profile = create_profile(age=18)
    self.assertTrue(profile.can_vote)
</code></pre>

<p>This approach solves the problem with maintaining the fixtures to suit your model design. If your model changes, the only thing you have to edit is the default values of the factory. Therefore <code>model factories</code> are way easier to maintain. If you need a large data set, you could easily write a for loop that wraps the model factory. So burn all your fixture right now !!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Custom Email Form Field for Email Pie]]></title>
    <link href="http://blog.namis.me/2012/03/27/django-custom-email-form-field-for-email-pie/"/>
    <updated>2012-03-27T01:14:00+11:00</updated>
    <id>http://blog.namis.me/2012/03/27/django-custom-email-form-field-for-email-pie</id>
    <content type="html"><![CDATA[<p>{% pullquote %}
As you know Django's <code>forms.EmailField()</code> is capable of validating email addresses but what if you wanted to validate the existence of a particular email address? I've found a pretty neat solution for that, it's called <a href="http://emailpie.com/">Email Pie</a>.
{"Email Pie is a wonderful little JSON API that gives you a simple way to validate email addresses. We'll let you know if that email address is legit or not."}. You could either use the service hosted on emailpie.com or run your own instance (it's open source). In this post, I'm going to show you how to write a custom form field that makes use of Email Pie.</p>

<!-- more -->


<p>Make sure you pip install <code>requests</code> and <code>simplejson</code> before proceeding. Now create a <code>fields.py</code> file with the following content:</p>

<pre><code class="python fields.py">import requests
import simplejson

from django import forms
from django.core.exceptions import ValidationError


EMAIL_PIE_HOST = 'http://emailpie.com'  # change this if you run your own instance

def validate_email_pie(value):
    params = {'email': value}
    response = requests.get('%s/v1/check' % EMAIL_PIE_HOST, params=params)
    response = simplejson.loads(response.content)

    if not response['success']:
        raise ValidationError(response['errors'][0]['message'])


class EmailPieField(forms.EmailField):
    default_validators = [validate_email_pie]
</code></pre>

<p><code>validate_email_pie</code> method makes GET request to Email Pie and gets back a response. The service checks for email format and mx records, it also catches misspellings (you can get it with <code>response['didyoumean']</code>). <code>validate_email_pie</code> raises <code>ValidationError</code> if the service detects an invalid email address. Now in your forms you can use <code>EmailPieField</code> like this:</p>

<pre><code class="python forms.py">from django import forms
from .fields import EmailPieField

class ContactForm(forms.Form):
    name = forms.CharField()
    email = EmailPieField()
</code></pre>

<p>For those interested, here are some tests for the field :)</p>

<pre><code class="python tests.py">from django.test import TestCase
from django.core.exceptions import ValidationError
from .fields import EmailPieField


class EmailPieFieldTest(TestCase):

    def test_invalid_email(self):
        email_field = EmailPieField()
        self.assertRaises(ValidationError, email_field.clean, 'email@totest')

    def test_invalid_mx(self):
        email_field = EmailPieField()
        self.assertRaises(ValidationError, email_field.clean, 'email@totest.com')

    def test_valid_email(self):
        email_field = EmailPieField()
        self.assertEquals(email_field.clean('nam@namis.me'), 'nam@namis.me')
</code></pre>

<p>{% endpullquote %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Caching Using Defaultdict]]></title>
    <link href="http://blog.namis.me/2012/02/15/python-caching-using-defaultdict/"/>
    <updated>2012-02-15T10:46:00+11:00</updated>
    <id>http://blog.namis.me/2012/02/15/python-caching-using-defaultdict</id>
    <content type="html"><![CDATA[<p>Today, I've learnt about <code>defaultdict</code> container from my colleague, who uses it for caching. <code>defaultdict</code> container is part of <code>collections</code> module which provides high-performance container datatypes.
You can find more about it <a href="http://docs.python.org/library/collections.html#collections.defaultdict">here</a>. <strong>Note</strong>: New in version 2.5.</p>

<!-- more -->


<p>Let's see the code without caching mechanism:</p>

<pre><code class="python">import csv
from models import Pony, PonySwag

# Getting some data from csv file
swags = csv.DictReader('pony_swag.csv', 'rU'), dialect='excel')

for swag in swags:
    # Get or create a pony
    pony = Pony.objects.get_or_create(
        name=swag['pony_name']
    )[0]

    # Create pony swag which belongs to a pony
    PonySwag.objects.get_or_create(
        name=swag['swag_name'],
        power=swag['swag_power'],
        pony=pony 
    )[0]
</code></pre>

<p>In this scenario, for every entry in csv, the code hits the database to get a pony (based on the name) to assign it to a corresponding swag. Now if we cache the created ponies, we would not have
to query the database anymore.</p>

<pre><code class="python">import csv
from collections import defaultdict
from models import Pony, PonySwag

class PoniesCache(defaultdict):
    # If dict lookup fails this will be called
    def __missing__(self, key):
        # Insert a pony in cache dict and return it
        pony = Pony.objects.get_or_create(name=key)[0]
        self[key] = pony
        return pony

ponies_cache = PoniesCache()
# Getting some data from csv file
swags = csv.DictReader('pony_swag.csv', 'rU'), dialect='excel')

for swag in swags:
    pony = ponies_cache[swag['pony_name']]

    # Create pony swag which belongs to a pony
    PonySwag.objects.get_or_create(
        name=swag['swag_name'],
        power=swag['swag_power'],
        pony=pony 
    )[0]
</code></pre>

<p>As you might have read, <code>defaultdict</code> is a subclass of <code>dict</code> and it overrides a method called <code>__missing__</code>.<br/>
<code>__missing__</code> is called by the <code>__getitem__()</code> method of the dict class when the requested key is not found (when <code>swag['pony_name']</code> value is not found in ponies_cache).
In our case, we override <code>__missing__</code> to create a pony and store it in cache (if it doesn't exist yet) and return it. This results in a pony being inserted in the dictionary with a key <code>swag['pony_name']</code>.</p>
]]></content>
  </entry>
  
</feed>
