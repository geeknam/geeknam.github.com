<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | geeknam's blog]]></title>
  <link href="http://geeknam.github.com/categories/api/atom.xml" rel="self"/>
  <link href="http://geeknam.github.com/"/>
  <updated>2012-02-17T12:43:38+11:00</updated>
  <id>http://geeknam.github.com/</id>
  <author>
    <name><![CDATA[Ngo Minh Nam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Regenerating Google's ClientLogin AuthToken in Django]]></title>
    <link href="http://geeknam.github.com/2012/02/14/regenerating-googles-clientlogin-authtoken-in-django/"/>
    <updated>2012-02-14T12:47:00+11:00</updated>
    <id>http://geeknam.github.com/2012/02/14/regenerating-googles-clientlogin-authtoken-in-django</id>
    <content type="html"><![CDATA[<p>If your application makes use of Google API, you will most likely have to deal with AuthToken expiry (unless you use oAuth). As far as I know, AuthToken generated with ClientLogin authorization expires after 2 weeks. Therefore, it's good to have a solution to auto regenerate it. First of all, create a model that stores the token and the last updated day.</p>

<!-- more -->


<p>``` python
from django.db import models
from datetime import datetime, timedelta</p>

<p>class AuthToken(models.Model):</p>

<pre><code>token = models.TextField()
last_updated = models.DateTimeField(auto_now_add=True)

def token_update(self):
    # Check if the token's lifespan is more than n days (n=1 in this case)
    # You can adjust n value to whatever you want

    if datetime.now() - self.last_updated &gt; timedelta(days=1):
        return True
    return False
</code></pre>

<p>```</p>

<p>Now let's write a function that regenerates AuthToken and saves it back to database.</p>

<p>```python
from models import AuthToken</p>

<p>CLIENT_LOGIN_URL = 'https://www.google.com/accounts/ClientLogin'</p>

<p>def regenerate_authtoken():</p>

<pre><code>auth_token = AuthToken.objects.all()[0]
if auth_token.token_update():
    data = urllib.urlencode(
        {
            'Email': 'youremail@gmail.com',
            'Passwd': 'yourpassword',
            'service': 'service_name',
            'accountType': 'GOOGLE'
        }
    )
    req = urllib2.Request(CLIENT_LOGIN_URL, data=data)
    resp = urllib2.urlopen(req)
    resp_body = resp.read()

    resp_dict = dict(
        x.split('=') for x in resp_body.split('\n') if x
    )
    auth_token.token = resp_dict['Auth']
    auth_token.save()
</code></pre>

<p>```</p>

<p>With this approach you would have to call <code>regenerate_authtoken()</code> every time you make API requests. Let me know if you have a better solution.</p>
]]></content>
  </entry>
  
</feed>
