<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google | Nam Ngo's blog]]></title>
  <link href="http://blog.namis.me/categories/google/atom.xml" rel="self"/>
  <link href="http://blog.namis.me/"/>
  <updated>2014-06-29T01:14:38+10:00</updated>
  <id>http://blog.namis.me/</id>
  <author>
    <name><![CDATA[Nam Ngo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Regenerating Google's ClientLogin AuthToken in Django]]></title>
    <link href="http://blog.namis.me/2012/02/14/regenerating-googles-clientlogin-authtoken-in-django/"/>
    <updated>2012-02-14T12:47:00+11:00</updated>
    <id>http://blog.namis.me/2012/02/14/regenerating-googles-clientlogin-authtoken-in-django</id>
    <content type="html"><![CDATA[<p>If your application makes use of Google API, you will most likely have to deal with AuthToken expiry (unless you use oAuth). As far as I know, AuthToken generated with ClientLogin authorization expires after 2 weeks. Therefore, it's good to have a solution to auto regenerate it. First of all, create a model that stores the token and the last updated day.</p>

<!-- more -->


<pre><code class="python">from django.db import models
from datetime import datetime, timedelta

class AuthToken(models.Model):
    token = models.TextField()
    last_updated = models.DateTimeField(auto_now_add=True)

    def token_update(self):
        # Check if the token's lifespan is more than n days (n=1 in this case)
        # You can adjust n value to whatever you want

        if datetime.now() - self.last_updated &gt; timedelta(days=1):
            return True
        return False
</code></pre>

<p>Now let's write a function that regenerates AuthToken and saves it back to database.</p>

<pre><code class="python">from models import AuthToken

CLIENT_LOGIN_URL = 'https://www.google.com/accounts/ClientLogin'

def regenerate_authtoken():
    auth_token = AuthToken.objects.all()[0]
    if auth_token.token_update():
        data = urllib.urlencode(
            {
                'Email': 'youremail@gmail.com',
                'Passwd': 'yourpassword',
                'service': 'service_name',
                'accountType': 'GOOGLE'
            }
        )
        req = urllib2.Request(CLIENT_LOGIN_URL, data=data)
        resp = urllib2.urlopen(req)
        resp_body = resp.read()

        resp_dict = dict(
            x.split('=') for x in resp_body.split('\n') if x
        )
        auth_token.token = resp_dict['Auth']
        auth_token.save()
</code></pre>

<p>With this approach you would have to call <code>regenerate_authtoken()</code> every time you make API requests. Let me know if you have a better solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aliases for Google Storage]]></title>
    <link href="http://blog.namis.me/2011/06/11/aliases-for-google-storage/"/>
    <updated>2011-06-11T13:13:00+10:00</updated>
    <id>http://blog.namis.me/2011/06/11/aliases-for-google-storage</id>
    <content type="html"><![CDATA[<p>I've just registered an account on Google Storage last month and I totally love it as. I particularly like gsutil since I'm most of my time on Terminal. Here are two aliases I use with gsutil in my <code>.bash_profile</code>. Of course, remember to replace your bucket name</p>

<pre><code class="bash">function gsup(){
    gsutil cp "$@" gs://bucketname.com
}

function gsdown(){
    gsutil cp gs://bucketname.com/"$@" ~/Desktop
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GAE XMPPHandler]]></title>
    <link href="http://blog.namis.me/2010/12/25/gae-xmpphandler/"/>
    <updated>2010-12-25T15:57:00+11:00</updated>
    <id>http://blog.namis.me/2010/12/25/gae-xmpphandler</id>
    <content type="html"><![CDATA[<p>Finally got time to continue developing Push Contacts. I've gotten a nerve-wrecking problem while developing with C2DM
applications. When the app supposed to get the push message, it didn't respond to it. Looking at the logs I encountered
an error stack related to GTalk (with TalkProvider tag). Decided to google the problem and the solution was to sign out
of GTalk on the phone.</p>

<!-- more -->


<p>Ok now a tip related to Google App Engine development. I just added a new feature to Push Contacts which is allowing
users to reply to the latest SMS received. I had to retrieve the email of the user the bot is chatting with to find
which phone number to send the SMS to. Took a look at guru.appspot.com source code and decided to use
<code>xmpp_handlers.CommandHandler</code>. Used this method <code>text_message(self, message)</code> and message.sender supposed to return the
sender of a message but instead it returned an IM formatted string. Here is how you can retrieve the email.</p>

<pre><code class="python">class XMPPHandler(xmpp_handlers.CommandHandler):
    def text_message(self, message):
        idx  = message.sender.index('/')
        user = message.sender[0:idx]
        logging.debug(user)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Web Service With Google App Engine]]></title>
    <link href="http://blog.namis.me/2010/06/13/simple-web-service-with-google-app-engine/"/>
    <updated>2010-06-13T13:44:00+10:00</updated>
    <id>http://blog.namis.me/2010/06/13/simple-web-service-with-google-app-engine</id>
    <content type="html"><![CDATA[<p>It's been a while since I last posted an entry. Nothing much has changed in my life. The two-week holiday has just passed by in a blink of an eye. Has been busy with Android assignment, Cypher IGs camp and Pycon Singapore 2010. Now after Pycon, I'm pretty much convinced about the power of simplicity of Python. Knowing Google App Engine (GAE) quite a while ago, I decided to use GAE to help me out in my assignment (yes, yes, Google to the rescue) by writing a simple GAE web service which stores/retrieves feedbacks in form of JSON. The following tutorial is simple enough for beginners to follow.</p>

<!-- more -->


<pre><code class="python">import urllib
import json
from google.appengine.api import mail
from google.appengine.ext import webapp, db
from google.appengine.ext.webapp import util
from google.appengine.ext.webapp.util import run_wsgi_app


class Feedback(db.Model):
    user     = db.StringProperty()
    heritage = db.StringProperty()
    comment  = db.StringProperty(multiline=True)
    star     = db.IntegerProperty()
    date     = db.DateTimeProperty(auto_now_add=True)

    #Convert feedback object into a dictionary
    def toDict(self):
        return {'user': self.user,'heritage': self.heritage,
                    'comment': self.comment,'star':  self.star,'date': self.date}


class FeedbackGetter(webapp.RequestHandler):
    def get(self,heritage):
    #Retrieve feedbacks of a particular heritage requested
        heritage = urllib.unquote(heritage)
        feedbacks = db.GqlQuery("SELECT * FROM Feedback WHERE heritage = :1", heritage)

        feedDict = {}
        for feedback in feedbacks:
            feedDict[str(feedback.key())] = feedback.toDict()

        self.response.out.write(json.encode(feedDict));

class FeedbackStore(webapp.RequestHandler):
    def post(self):
    #Storing feedback in datastore
        feedback = Feedback()
        feedback.user     = self.request.get('email')
        feedback.heritage = self.request.get('heritage')
        feedback.comment  = self.request.get('comment')
        feedback.star     = int(self.request.get('star'))
        feedback.put()

        #Sending confirmation email to the user
        myemail         = mail.EmailMessage()
        myemail.sender  = "World Heritage Site &lt;noreply@androidnam.appspotmail.com&gt;"
        myemail.to      = feedback.user
        myemail.subject = "Feedback on " + feedback.heritage
        myemail.body    = '''
        Thank you for submitting your feedback, \n
        Heritage: %s \n
        Comment: %s \n
        Rating: %s 
        ''' % (feedback.heritage, feedback.comment, feedback.star)
        myemail.send()

        self.redirect('/get/'+feedback.heritage)

class FeedbackForm(webapp.RequestHandler):
    def get(self):
        self.response.out.write("""
        &lt;html&gt;
          &lt;body&gt;
            &lt;form action="/store" method="post"&gt;
              Heritage:&lt;div&gt;&lt;input name="heritage" /&gt;&lt;/div&gt;
              Email:&lt;div&gt;&lt;input name="email" /&gt;&lt;/div&gt;
              Comment:&lt;div&gt;&lt;input name="comment" /&gt;&lt;/div&gt;
              Star:&lt;div&gt;&lt;input name="star" /&gt;&lt;/div&gt;
              &lt;div&gt;&lt;input type="submit" value="Submit"&gt;&lt;/div&gt;
            &lt;/form&gt;
          &lt;/body&gt;
        &lt;/html&gt;
        """)


application = webapp.WSGIApplication([(r'/get/(.*)', FeedbackGetter),
                      ('/store', FeedbackStore),
                      ('/feedback', FeedbackForm)],
                                      debug=True)


def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</code></pre>
]]></content>
  </entry>
  
</feed>
